Soluções da lista de exercícios:

Questão 1 

- De forma resumida, linguagens de programação de baixo nível são linguagens de programação que se aproximam da forma como o computador interpreta instruções
e dados, enquanto as linguagens de alto nível são linguagens que se aproximam da forma como nós, humanos, interpretamos os dados. Embora sejam mais fáceis de
compreender e utilizar, as linguagens de alto nível possuem uma performance muito inferior à das linguagens de baixo nível, uma vez que são necessárias várias
'traduções' para que os comandos programados numa linguagem de alto nível possam ser compreendidos pelo computador, e essas traduções consomem tempo. É importante
mencionar que existem diversas camadas de traduções, e que portanto existem linguagens de mais alto nível que outras, ou seja, linguagens que necessitam de
mais 'traduções' para serem executadas e que portanto possuem uma performance inferior.
Compiladores são os programas que realizam as 'traduções' previamente mencionadas, o que significa que eles são absolutamente necessários para que o computador
possa executar programas feitos em linguagens de alto nível.







Questão 2

- Instruções:
1: Acessar o site: https://ideone.com/
2: Para cada código que será citado abaixo, selecione a linguagem correspondente no site (Existe um menu onde você pode escolher entre várias linguagens de
programação para compilar), copie o código e cole-o na linha de texto que diz "# your code goes here".
3: Após copiar um código e selecionar a devida linguagem, digite um número inteiro logo abaixo do texto "enter input (stdin)" e clique no botão "Run" para executar
o programa.

--------------------------------------------------------------------

C:

--------------------------------------------------------------------

#include <stdio.h>
#include <math.h>
int main()
{
 int i,n;
 double res=1.0;
 scanf("%d",&n);
 for(i=1;i<=n;i++){
 if(i%2==1){
 res=res*pow(2*i-1,2*i-1)/pow(2*i,2*i);
 }
 else{
 res=res+pow(2*i-1,2*i-1)/pow(2*i,2*i);
 }
 }
 printf("%.6lf\n",res);
 return 0;
}


--------------------------------------------------------------------

Exemplos de inputs e outputs:

Input: 1
Output: 0.250000

Input: 2
Output: 0.355469

Input: 3
Output: 0.023809

--------------------------------------------------------------------

C++:

--------------------------------------------------------------------

#include <iostream>
#include <math.h>
using namespace std;
int main()
{
 int i,n;
 double res=1.0;
 cin>>n;
 for(i=1;i<=n;i++){
 if(i%2==1){
 res=res*pow(2*i-1,2*i-1)/pow(2*i,2*i);
 }
 else{
 res=res+pow(2*i-1,2*i-1)/pow(2*i,2*i);
 }
 }
 cout<<res<<endl;
 return 0;
}

--------------------------------------------------------------------

Exemplos de inputs e outputs:

Input: 1
Output: 0.25

Input: 2
Output: 0.355469

Input: 3
Output: 0.0238092

--------------------------------------------------------------------

Perl:

--------------------------------------------------------------------

#!/usr/bin/perl 
my $n = <>;
my $res = 1.0;
my $i = 1;
for($i=1;$i<=$n;$i++){
if($i%2 == 1){
$res = $res*(((2*$i)-1)**((2*$i)-1))/((2*$i)**(2*$i));
} else {
$res = $res+(((2*$i)-1)**((2*$i)-1))/((2*$i)**(2*$i));
}
} 
printf "%.15f",$res;

--------------------------------------------------------------------

Exemplos de inputs e outputs:

Input: 1
Output: 0.250000000000000

Input: 2
Output: 0.355468750000000

Input: 3
Output: 0.023809153029621

---------------------------------------------------------------------

Python:
(CUIDADO: NÃO remover as tabulações sob hipótese alguma)
(CUIDADO: Selecionar a opção "Python 3", não a opção "Python" no site)

---------------------------------------------------------------------

n=int(input(""))
res=1.0
for i in range(1,(n+1)):
	if(i%2==1):
		res=res*(((2*i)-1)**((2*i)-1))/((2*i)**(2*i))
	else:
		res=res+(((2*i)-1)**((2*i)-1))/((2*i)**(2*i))
print(res)

---------------------------------------------------------------------

Exemplos: de inputs e outputs:

Input: 1
Output: 0.25

Input: 2
Output: 0.35546875

Input: 3
Output: 0.023809153029621055

---------------------------------------------------------------------





Questão 3:

-Instruções: 
1: Acessar o site: https://ideone.com/
2: Para cada código que será citado abaixo, selecione a linguagem correspondente no site (Existe um menu onde você pode escolher entre várias linguagens de
programação para compilar), copie o código e cole-o na linha de texto que diz "# your code goes here".
3: Após copiar um código e selecionar a devida linguagem, digite o seu input logo abaixo do texto "enter input (stdin)" e clique no botão "Run" para executar
o programa. O input deverá seguir o seguinte formato: Na primeira linha, digite um número inteiro. Esse número representa o número de strings que serão lidas.
Na próxima linha, digite as strings a serem comparadas, todas separadas por espaços.


-----------------------------------------------------------------------

C:

-----------------------------------------------------------------------

#include<stdio.h>
#include<string.h>
int main() {
char nomes[20][20],aux[20];
int qnt, i, j;
scanf("%d",&qnt);
for(i=0; i<qnt; i++){
scanf("%s",nomes[i]);
}
for(i=0;i<qnt;i++){
for(j=0;j<qnt;j++){
if(strcmp(nomes[i],nomes[j]) < 0) {
strcpy(aux,nomes[i]);
strcpy(nomes[i],nomes[j]);
strcpy(nomes[j],aux);
}
}
} 
for(i=0; i<2; i++){
printf("%s\n", nomes[i]);
}
return 0;
}

------------------------------------------------------------------------

Exemplos de input e output:

Input:
5
Peter 
Aureo
Fernando
Joca
Pelea

Output:
-Nomes Selecionados:-
Aureo
Fernando

------------------------------------------------------------------------

C++:

------------------------------------------------------------------------

#include<string.h>
#include <iostream>
using namespace std;
int main() {
char nomes[20][20],aux[20];
int qnt,i,j;
cin >> qnt;
for(i=0;i<qnt;i++){
cin >> nomes[i];
}
for(i=0;i<qnt;i++) {
for(j=0;j<qnt;j++) {
if(strcmp(nomes[i],nomes[j]) < 0) {
strcpy(aux,nomes[i]);
strcpy(nomes[i],nomes[j]);
strcpy(nomes[j],aux);
}
}
}
for(i=0;i<2;i++){
cout <<nomes[i]<<"\n";
}
return 0;
}

------------------------------------------------------------------------

Exemplos de input e output:

Input:
5
Peter 
Aureo
Fernando
Joca
Pelea

Output:
Aureo
Fernando

------------------------------------------------------------------------


Questão 4:

- Instruções: 
1: Copiar o código abaixo para o Genie e salvá-lo como "rnd.sh"
2: Para compilar o programa, acesse a pasta na qual o programa foi salvo através do terminal do Linux, e digite "chmod +x rnd.sh".
Em seguida, para executá-lo, digite "./rnd.sh", ainda no terminal.
3: Ao executar o programa, digite o link do site cujas imagens você deseja baixar.

Código:

#!/bin/bash
read site
wget -r -A jpeg,jpg,png $site

------------------------------------------------------------------------




Questão 5:

- Linguagens imperativas: São linguagens cujos programas consistem em sequências de comandos que realizam transformações sobre dados. Exemplos são as linguagens
C e Pascal.
- Linguagens funcionais: São linguagens cujos programas computam valores através de funções. Por não possuírem o conceito de atribuição, seus dados são imutáveis.
Exemplos são as linguagens Haskell e Lisp.
- Linguagens lógicas: São linguagens cujos programas operam através da lógica matemática. Dado um conjunto de premissas (A 'entrada'), o programa é capaz de tomar
conclusões que podem ser consideradas uma 'saída'. Exemplos são as linguagens Conniver e QLISP.
- Linguagens de marcação: São linguagens que visam modificar a forma de exibição de dados, ao invés de modificar os próprios dados. Exemplos são as linguagens HTML
e CSS.




Questão 6:

- <expr>→<expo>*<expr>|<expo>
  <expo>→<base>^<expo>|<base>
  <base>→A|B|C






Questão 7:

- Paradigmas de programação podem ser definidos como padrões reconhecíveis em diferentes linguagens de programação utilizados para classificá-las de acordo com 
características que elas possuam em comum.





Questão 8:

- Analisador léxico é a parte do compilador que lê o programa caractere por caractere e o transforma em uma representação que possa ser compreendida pelo analisador
sintático (Os chamados "Tokens" da linguagem).


Questão 9.2:

- A análise semântica consiste em descrever o significado das instruções de uma linguagem de programação. Necessária para comprovar a exatidão de um programa,
analisando-o instrução por instrução.
A semântica operacional realiza essa análise através da execução de suas instruções em uma máquina, que pode ser virtual ou não. Para tanto, utilizam de linguagens
intermediárias e interpretadores.
A semântica axiomática consiste em transformar as instruções em axiomas lógicos, que são analisados até que se chegue a uma conclusão. Essa conclusão define o que
é possível fazer com o programa em questão.
A semântica denotacional transforma instruções em objetos matemáticos e os programas em funções matemáticas que operam utilizando estes objetos. Baseia-se na teoria
de que não é possível controlar construções de linguagens de programação, mas que é perfeitamente possível controlar objetos matemáticos.



Questão 10:

a) 
122*y-144>144
122*y>144+144
122*y>288
y>288/122
y>144/61


b)
y=5*x-5
y+5<45
y<40
5*x-5<40
5*x<45
x<9

c)
Then:
y=y+2
2<y+2
0<y
y>0

Else:
y=y-2
2<y-2
4<y

y>4

Aplicando a regra de consequência:
y>4 => y>0

Logo:
y>4

d)
Invariante do laço:
i<=n

Aplicando atribuição em i = i+1:
n >= i+1
n>=i
i<=n

Se I é verdadeiro e B é falso, o laço é finalizado:
i<=n AND not(i<n)
i<=n AND i>=n
i=n

O laço é finalizado quando i=n, logo a invariante é, de fato, i<=n.
